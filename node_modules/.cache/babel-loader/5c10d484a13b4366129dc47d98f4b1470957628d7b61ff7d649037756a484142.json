{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Table from '/src/components/Table.vue';\nimport PieChart from '/src/components/PieChart.vue';\nimport LineChart from '/src/components/LineChart.vue';\nexport default {\n  name: 'Debts',\n  components: {\n    Table,\n    PieChart,\n    LineChart\n  },\n  data() {\n    return {\n      tableData: [],\n      pieChartLabels: [],\n      pieChartValues: []\n    };\n  },\n  mounted() {\n    // Set pie chart & table data\n    if (this.$store.state.allAssets.length) {\n      for (let asset of this.$store.state.allAssets) {\n        if (!asset.is_deleted && asset.is_debt) {\n          this.pieChartLabels.push(asset.name);\n          this.pieChartValues.push(parseFloat(asset.value));\n          this.tableData.push(asset);\n        }\n      }\n    }\n  },\n  computed: {\n    lineChartData() {\n      return [{\n        name: 'Total Debts',\n        data: this.refineHistory(this.$store.state.allAssets, this.$store.state.allHistory)\n      }];\n    }\n  },\n  methods: {\n    refineHistory(assets, history) {\n      // Remove negative assets\n      assets = assets.filter(e => e.is_debt == 1);\n\n      // Get all individual assets\n      let assetList = [];\n      for (let asset of assets) {\n        assetList.push({\n          id: asset.id,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assetList) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      let refinedHistory = [];\n      for (let asset of assetList) {\n        for (let entry of asset.history) {\n          let i = refinedHistory.findIndex(e => e.x == entry.x);\n          if (i < 0) {\n            refinedHistory.push(entry);\n          } else {\n            refinedHistory[i].y += entry.y;\n          }\n        }\n      }\n      return refinedHistory;\n    }\n  }\n};","map":{"version":3,"names":["Table","PieChart","LineChart","name","components","data","tableData","pieChartLabels","pieChartValues","mounted","$store","state","allAssets","length","asset","is_deleted","is_debt","push","parseFloat","value","computed","lineChartData","refineHistory","allHistory","methods","assets","history","filter","e","assetList","id","uniqueDates","entry","includes","date","sort","asset_id","x","y","some","refinedHistory","i","findIndex"],"sources":["src/components/Debts.vue"],"sourcesContent":["<template>\r\n    <v-row class=\"ma-2\">\r\n        <v-flex xs12>\r\n            <LineChart :theme=\"$vuetify.theme.themes.light.error\" :series=\"lineChartData\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <Table type=\"Debt\" url=\"debts\" :tableData=\"tableData\" :totalValue=\"$store.state.totalNegativeAssets\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <PieChart type=\"Debt\" :series=\"pieChartValues\" :labels=\"pieChartLabels\"/>\r\n        </v-flex>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport Table from '/src/components/Table.vue'\r\nimport PieChart from '/src/components/PieChart.vue'\r\nimport LineChart from '/src/components/LineChart.vue'\r\n\r\nexport default ({\r\n    name: 'Debts',\r\n    components: {\r\n        Table,\r\n        PieChart,\r\n        LineChart,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            tableData: [],\r\n            pieChartLabels: [],\r\n            pieChartValues: [],\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        // Set pie chart & table data\r\n        if (this.$store.state.allAssets.length) {\r\n            for (let asset of this.$store.state.allAssets) {\r\n                if (!asset.is_deleted && asset.is_debt) {\r\n                    this.pieChartLabels.push(asset.name)\r\n                    this.pieChartValues.push(parseFloat(asset.value))\r\n                    this.tableData.push(asset)\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        lineChartData() {\r\n            return [{\r\n                name: 'Total Debts',\r\n                data: this.refineHistory(this.$store.state.allAssets, this.$store.state.allHistory)\r\n            }]\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        refineHistory(assets, history) {\r\n            // Remove negative assets\r\n            assets = assets.filter(e => e.is_debt == 1)\r\n\r\n            // Get all individual assets\r\n            let assetList = []\r\n            for (let asset of assets) {\r\n                assetList.push({\r\n                    id: asset.id,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assetList) {\r\n                for (let date of uniqueDates) {\r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            let refinedHistory = []\r\n\r\n            for (let asset of assetList) {\r\n                for (let entry of asset.history) {\r\n                    let i = refinedHistory.findIndex(e => e.x == entry.x)\r\n                    if (i < 0) {\r\n                        refinedHistory.push(entry)\r\n                    }\r\n                    else {\r\n                        refinedHistory[i].y += entry.y\r\n                    }\r\n                }\r\n            }\r\n\r\n            return refinedHistory\r\n        }\r\n    }\r\n})\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}