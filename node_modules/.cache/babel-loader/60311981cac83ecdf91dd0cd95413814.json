{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport LineChart from '/src/components/LineChart.vue';\nimport TreeMapChart from '/src/components/TreeMapChart.vue';\nimport axios from 'axios';\nexport default {\n  name: 'NetWorth',\n  components: {\n    LineChart,\n    TreeMapChart\n  },\n  data() {\n    return {\n      treeChartData: [{\n        name: 'Assets',\n        data: []\n      }, {\n        name: 'Debts',\n        data: []\n      }],\n      lineChartData: [{\n        name: 'Net Worth',\n        data: []\n      }]\n    };\n  },\n  mounted() {\n    this.loadData();\n  },\n  methods: {\n    async loadData() {\n      this.lineChartData[0].data = [];\n      this.treeChartData[0].data = [];\n      this.treeChartData[1].data = [];\n      axios.get(`http://localhost:3000/api/assets/all`).then(resp => {\n        let assetData = resp.data;\n        for (let asset of assetData) {\n          if (asset.is_debt && !asset.is_deleted) {\n            this.treeChartData[1].data.push({\n              x: asset.name,\n              y: parseFloat(asset.value)\n            });\n          } else if (!asset.is_deleted) {\n            this.treeChartData[0].data.push({\n              x: asset.name,\n              y: parseFloat(asset.value)\n            });\n          }\n        }\n        axios.get(`http://localhost:3000/api/assets/history/all`).then(resp => {\n          this.refineAssets(assetData, resp.data);\n        });\n      });\n    },\n    refineAssets(assetData, history) {\n      // Get all individual assets\n      let assets = [];\n      for (let asset of assetData) {\n        assets.push({\n          id: asset.id,\n          is_debt: asset.is_debt,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assets) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      for (let asset of assets) {\n        for (let entry of asset.history) {\n          let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n          if (asset.is_debt) {\n            if (i < 0) {\n              entry.y = 0 - entry.y;\n              this.lineChartData[0].data.push(entry);\n            } else {\n              this.lineChartData[0].data[i].y -= entry.y;\n            }\n          } else {\n            if (i < 0) {\n              this.lineChartData[0].data.push(entry);\n            } else {\n              this.lineChartData[0].data[i].y += entry.y;\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAaA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EAEAC;IACA;MACAC,gBACA;QACAL;QACAI;MACA,GACA;QACAJ;QACAI;MACA,EACA;MAEAE;QACAN;QACAI;MACA;IACA;EACA;EAEAG;IACA;EACA;EAEAC;IACA;MACA;MACA;MACA;MAEAC,kDACAC;QACA;QAEA;UACA;YACA;cACAC;cACAC;YACA;UACA,OACA;YACA;cACAD;cACAC;YACA;UACA;QACA;QAEAH,0DACAC;UACA;QACA;MACA;IAEA;IAEAG;MACA;MACA;MACA;QACAC;UACAC;UACAC;UACAC;QACA;MACA;;MAEA;MACA;MACA;QACA;UACAC;QACA;MACA;MACAA;;MAEA;MACA;QACA;UACA;UACA;YACA;cACAC;gBACAR;gBACAC;cACA;YACA;UACA;UACA;UACA;YACA;cACAO;gBACAR;gBACAC;cACA;YACA;UACA;QACA;MACA;;MAEA;MACA;QACA;UACA;UACA;YACA;cACAQ;cACA;YACA,OACA;cACA;YACA;UACA,OACA;YACA;cACA;YACA,OACA;cACA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","components","LineChart","TreeMapChart","data","treeChartData","lineChartData","mounted","methods","axios","then","x","y","refineAssets","assets","id","is_debt","history","uniqueDates","asset","entry"],"sourceRoot":"src/components","sources":["NetWorth.vue"],"sourcesContent":["<template>\r\n    <v-row class=\"ma-2\">\r\n        <v-flex xs12>\r\n            <LineChart theme=\"#aed581\" :series=\"lineChartData\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <TreeMapChart :series=\"treeChartData\"/>\r\n        </v-flex>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport LineChart from '/src/components/LineChart.vue'\r\nimport TreeMapChart from '/src/components/TreeMapChart.vue'\r\nimport axios from 'axios'\r\n\r\nexport default ({\r\n    name: 'NetWorth',\r\n    components: {\r\n        LineChart,\r\n        TreeMapChart,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            treeChartData: [\r\n                {\r\n                    name: 'Assets',\r\n                    data: []\r\n                },\r\n                {\r\n                    name: 'Debts',\r\n                    data: []\r\n                }\r\n            ],\r\n\r\n            lineChartData: [{\r\n                name: 'Net Worth',\r\n                data: []\r\n            }],\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.loadData()\r\n    },\r\n\r\n    methods: {\r\n        async loadData() {\r\n            this.lineChartData[0].data = []\r\n            this.treeChartData[0].data = []\r\n            this.treeChartData[1].data = []\r\n            \r\n            axios.get(`http://localhost:3000/api/assets/all`)\r\n            .then(resp => {\r\n                let assetData = resp.data\r\n\r\n                for (let asset of assetData) {\r\n                    if (asset.is_debt && !asset.is_deleted) {\r\n                        this.treeChartData[1].data.push({\r\n                            x: asset.name,\r\n                            y: parseFloat(asset.value)\r\n                        })\r\n                    }\r\n                    else if (!asset.is_deleted) {\r\n                        this.treeChartData[0].data.push({\r\n                            x: asset.name,\r\n                            y: parseFloat(asset.value)\r\n                        })\r\n                    }\r\n                }\r\n\r\n                axios.get(`http://localhost:3000/api/assets/history/all`)\r\n                .then(resp => {\r\n                    this.refineAssets(assetData, resp.data)\r\n                })\r\n            })\r\n\r\n        },\r\n\r\n        refineAssets(assetData, history) {\r\n            // Get all individual assets\r\n            let assets = []\r\n            for (let asset of assetData) {\r\n                assets.push({\r\n                    id: asset.id,\r\n                    is_debt: asset.is_debt,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assets) {\r\n                for (let date of uniqueDates) {                    \r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            for (let asset of assets) {\r\n                for (let entry of asset.history) {\r\n                    let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                    if (asset.is_debt) {\r\n                        if (i < 0) {\r\n                            entry.y = 0 - entry.y\r\n                            this.lineChartData[0].data.push(entry)\r\n                        }\r\n                        else {\r\n                            this.lineChartData[0].data[i].y -= entry.y\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (i < 0) {\r\n                            this.lineChartData[0].data.push(entry)\r\n                        }\r\n                        else {\r\n                            this.lineChartData[0].data[i].y += entry.y\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>"]},"metadata":{},"sourceType":"module"}