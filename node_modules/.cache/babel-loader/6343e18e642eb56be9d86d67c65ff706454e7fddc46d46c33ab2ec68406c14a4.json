{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Table from '/src/components/Table.vue';\nimport PieChart from '/src/components/PieChart.vue';\nimport LineChart from '/src/components/LineChart.vue';\nexport default {\n  name: 'Assets',\n  components: {\n    Table,\n    PieChart,\n    LineChart\n  },\n  data() {\n    return {\n      lineChartData: [{\n        name: 'Total Assets',\n        data: []\n      }]\n    };\n  },\n  mounted() {\n    this.refineHistory(this.$store.state.assets.tabledata, this.$store.state.assets.history);\n  },\n  methods: {\n    refineHistory(assetData, history) {\n      // Get all individual assets\n      let assets = [];\n      for (let asset of assetData) {\n        assets.push({\n          id: asset.id,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assets) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      for (let asset of assets) {\n        for (let entry of asset.history) {\n          let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n          if (i < 0) {\n            this.lineChartData[0].data.push(entry);\n          } else {\n            this.lineChartData[0].data[i].y += entry.y;\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["Table","PieChart","LineChart","name","components","data","lineChartData","mounted","refineHistory","$store","state","assets","tabledata","history","methods","assetData","asset","push","id","uniqueDates","entry","includes","date","sort","asset_id","x","y","parseFloat","value","some","e","length","i","findIndex"],"sources":["src/components/Assets.vue"],"sourcesContent":["<template>\r\n    <v-row class=\"ma-2\">\r\n        <v-flex xs12>\r\n            <LineChart :theme=\"$vuetify.theme.themes.light.primary\" :series=\"lineChartData\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <Table type=\"Asset\" url=\"assets\" :tableData=\"$store.state.assets.tableData\" :totalValue=\"$store.state.assets.totalValue\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <PieChart type=\"Asset\" :series=\"$store.state.assets.pieChartValues\" :labels=\"$store.state.assets.pieChartLabels\"/>\r\n        </v-flex>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport Table from '/src/components/Table.vue'\r\nimport PieChart from '/src/components/PieChart.vue'\r\nimport LineChart from '/src/components/LineChart.vue'\r\n\r\nexport default ({\r\n    name: 'Assets',\r\n    components: {\r\n        Table,\r\n        PieChart,\r\n        LineChart,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            lineChartData: [{\r\n                name: 'Total Assets',\r\n                data: []\r\n            }],\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.refineHistory(this.$store.state.assets.tabledata, this.$store.state.assets.history)\r\n    },\r\n\r\n    methods: {\r\n        refineHistory(assetData, history) {\r\n            // Get all individual assets\r\n            let assets = []\r\n            for (let asset of assetData) {\r\n                assets.push({\r\n                    id: asset.id,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assets) {\r\n                for (let date of uniqueDates) {                    \r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            for (let asset of assets) {\r\n                for (let entry of asset.history) {\r\n                    let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                    if (i < 0) {\r\n                        this.lineChartData[0].data.push(entry)\r\n                    }\r\n                    else {\r\n                        this.lineChartData[0].data[i].y += entry.y\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    }\r\n})\r\n</script>"],"mappings":";AAiBA,OAAAA,KAAA;AACA,OAAAC,QAAA;AACA,OAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAJ,KAAA;IACAC,QAAA;IACAC;EACA;EAEAG,KAAA;IACA;MACAC,aAAA;QACAH,IAAA;QACAE,IAAA;MACA;IACA;EACA;EAEAE,QAAA;IACA,KAAAC,aAAA,MAAAC,MAAA,CAAAC,KAAA,CAAAC,MAAA,CAAAC,SAAA,OAAAH,MAAA,CAAAC,KAAA,CAAAC,MAAA,CAAAE,OAAA;EACA;EAEAC,OAAA;IACAN,cAAAO,SAAA,EAAAF,OAAA;MACA;MACA,IAAAF,MAAA;MACA,SAAAK,KAAA,IAAAD,SAAA;QACAJ,MAAA,CAAAM,IAAA;UACAC,EAAA,EAAAF,KAAA,CAAAE,EAAA;UACAL,OAAA;QACA;MACA;;MAEA;MACA,IAAAM,WAAA;MACA,SAAAC,KAAA,IAAAP,OAAA;QACA,KAAAM,WAAA,CAAAE,QAAA,CAAAD,KAAA,CAAAE,IAAA;UACAH,WAAA,CAAAF,IAAA,CAAAG,KAAA,CAAAE,IAAA;QACA;MACA;MACAH,WAAA,GAAAA,WAAA,CAAAI,IAAA;;MAEA;MACA,SAAAP,KAAA,IAAAL,MAAA;QACA,SAAAW,IAAA,IAAAH,WAAA;UACA;UACA,SAAAC,KAAA,IAAAP,OAAA;YACA,IAAAO,KAAA,CAAAE,IAAA,IAAAA,IAAA,IAAAF,KAAA,CAAAI,QAAA,IAAAR,KAAA,CAAAE,EAAA;cACAF,KAAA,CAAAH,OAAA,CAAAI,IAAA;gBACAQ,CAAA,EAAAL,KAAA,CAAAE,IAAA;gBACAI,CAAA,EAAAC,UAAA,CAAAP,KAAA,CAAAQ,KAAA;cACA;YACA;UACA;UACA;UACA,KAAAZ,KAAA,CAAAH,OAAA,CAAAgB,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAL,CAAA,IAAAH,IAAA;YACA,IAAAN,KAAA,CAAAH,OAAA,CAAAkB,MAAA;cACAf,KAAA,CAAAH,OAAA,CAAAI,IAAA;gBACAQ,CAAA,EAAAH,IAAA;gBACAI,CAAA,EAAAC,UAAA,CAAAX,KAAA,CAAAH,OAAA,CAAAG,KAAA,CAAAH,OAAA,CAAAkB,MAAA,MAAAL,CAAA;cACA;YACA;UACA;QACA;MACA;;MAEA;MACA,SAAAV,KAAA,IAAAL,MAAA;QACA,SAAAS,KAAA,IAAAJ,KAAA,CAAAH,OAAA;UACA,IAAAmB,CAAA,QAAA1B,aAAA,IAAAD,IAAA,CAAA4B,SAAA,CAAAH,CAAA,IAAAA,CAAA,CAAAL,CAAA,IAAAL,KAAA,CAAAK,CAAA;UACA,IAAAO,CAAA;YACA,KAAA1B,aAAA,IAAAD,IAAA,CAAAY,IAAA,CAAAG,KAAA;UACA,OACA;YACA,KAAAd,aAAA,IAAAD,IAAA,CAAA2B,CAAA,EAAAN,CAAA,IAAAN,KAAA,CAAAM,CAAA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}