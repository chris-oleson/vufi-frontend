{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport VuexPersistence from 'vuex-persist';\nimport axios from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  plugins: [new VuexPersistence({\n    storage: window.sessionStorage\n  }).plugin],\n  state: {\n    isLoggedIn: false,\n    userPrefs: {\n      theme: 0,\n      currency: 'USD'\n    },\n    notification: {\n      text: '',\n      color: ''\n    },\n    assets: {\n      totalValue: null,\n      tableData: [],\n      pieChartValues: [],\n      pieChartLabels: [],\n      history: []\n    },\n    debts: {\n      totalValue: null,\n      tableData: [],\n      pieChartValues: [],\n      pieChartLabels: [],\n      history: []\n    }\n  },\n  getters: {},\n  mutations: {\n    login(state) {\n      state.isLoggedIn = true;\n    },\n    setUserPrefs(state, data) {\n      state.userPrefs = data;\n    },\n    logOut(state) {\n      state.isLoggedIn = false;\n      state.userPrefs = {\n        theme: 0,\n        currency: 'USD'\n      };\n      state.totalAssetValue = null, state.totalDebtValue = null;\n    },\n    setNotification(state, data) {\n      state.notification = data;\n    },\n    setAssetData(state, assets) {\n      state.assets.totalValue = assets.totalValue;\n      state.assets.tableData = assets.tableData;\n      state.assets.pieChartValues = assets.pieChartValues;\n      state.assets.pieChartLabels = assets.pieChartLabels;\n      state.assets.history = assets.history;\n    },\n    setDebtData(state, debts) {\n      state.debts.totalValue = debts.totalValue;\n      state.debts.tableData = debts.tableData;\n      state.debts.pieChartValues = debts.pieChartValues;\n      state.debts.pieChartLabels = debts.pieChartLabels;\n      state.debts.history = debts.history;\n    }\n  },\n  actions: {\n    async getAssetData() {\n      // Set up object we want to return\n      let assets = {\n        totalValue: 0,\n        tableData: [],\n        pieChartValues: [],\n        pieChartLabels: [],\n        history: []\n      };\n\n      // Get raw asset data\n      axios.get(`http://localhost:3000/api/assets`).then(resp => {\n        let assetData = resp.data;\n\n        // Set total value and pie chart data\n        if (assetData.length) {\n          for (let asset of assetData) {\n            if (!asset.is_deleted) {\n              assets.pieChartLabels.push(asset.name);\n              assets.pieChartValues.push(parseFloat(asset.value));\n              assets.totalValue += parseFloat(asset.value);\n            }\n          }\n        }\n\n        // Filter out deleted assets in the table\n        assets.tableData = assetData.filter(e => e.is_deleted == 0);\n\n        // Fill line chart with historic values\n        axios.get(`http://localhost:3000/api/assets/history`).then(resp => {\n          let history = resp.data;\n\n          // Get all individual assets\n          let assets = [];\n          for (let asset of assetData) {\n            assets.push({\n              id: asset.id,\n              history: []\n            });\n          }\n\n          // Get all dates that there are records for\n          let uniqueDates = [];\n          for (let entry of history) {\n            if (!uniqueDates.includes(entry.date)) {\n              uniqueDates.push(entry.date);\n            }\n          }\n          uniqueDates = uniqueDates.sort();\n\n          // Go through every asset\n          for (let asset of assets) {\n            for (let date of uniqueDates) {\n              // Check if there is any value for that asset on that date, add it if there is.\n              for (let entry of history) {\n                if (entry.date == date && entry.asset_id == asset.id) {\n                  asset.history.push({\n                    x: entry.date,\n                    y: parseFloat(entry.value)\n                  });\n                }\n              }\n              // If the asset doesn't have an entry for a date with data, add one with the previous value.\n              if (!asset.history.some(e => e.x == date)) {\n                if (asset.history.length) {\n                  asset.history.push({\n                    x: date,\n                    y: parseFloat(asset.history[asset.history.length - 1].y)\n                  });\n                }\n              }\n            }\n          }\n\n          // Turn the asset data into something the line chart can read\n          for (let asset of assets) {\n            for (let entry of asset.history) {\n              let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n              if (i < 0) {\n                this.lineChartData[0].data.push(entry);\n              } else {\n                this.lineChartData[0].data[i].y += entry.y;\n              }\n            }\n          }\n          this.commit('setAssetData', assets);\n        });\n      }).catch(() => {\n        this.$router.push('/404');\n      });\n    },\n    async getDebtData() {\n      // Set up object we want to return\n      let debts = {\n        totalValue: 0,\n        tableData: [],\n        pieChartValues: [],\n        pieChartLabels: [],\n        history: []\n      };\n\n      // Get raw asset data\n      axios.get(`http://localhost:3000/api/debts`).then(resp => {\n        let debtData = resp.data;\n\n        // Set total value and pie chart data\n        if (debtData.length) {\n          for (let debt of debtData) {\n            if (!debt.is_deleted) {\n              debts.pieChartLabels.push(debt.name);\n              debts.pieChartValues.push(parseFloat(debt.value));\n              debts.totalValue += parseFloat(debt.value);\n            }\n          }\n        }\n\n        // Filter out deleted assets in the table\n        debts.tableData = debtData.filter(e => e.is_deleted == 0);\n\n        // Fill line chart with historic values\n        axios.get(`http://localhost:3000/api/debts/history`).then(resp => {\n          if (resp != null) {\n            this.commit('setDebtData', debts);\n          }\n\n          // this.refineAssets(assetData, resp.data)\n        });\n      }).catch(() => {\n        this.$router.push('/404');\n      });\n    },\n    refineHistory(assetData, history) {\n      // Get all individual assets\n      let assets = [];\n      for (let asset of assetData) {\n        assets.push({\n          id: asset.id,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assets) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      for (let asset of assets) {\n        for (let entry of asset.history) {\n          let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n          if (i < 0) {\n            this.lineChartData[0].data.push(entry);\n          } else {\n            this.lineChartData[0].data[i].y += entry.y;\n          }\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","VuexPersistence","axios","use","Store","plugins","storage","window","sessionStorage","plugin","state","isLoggedIn","userPrefs","theme","currency","notification","text","color","assets","totalValue","tableData","pieChartValues","pieChartLabels","history","debts","getters","mutations","login","setUserPrefs","data","logOut","totalAssetValue","totalDebtValue","setNotification","setAssetData","setDebtData","actions","getAssetData","get","then","resp","assetData","length","asset","is_deleted","push","name","parseFloat","value","filter","e","id","uniqueDates","entry","includes","date","sort","asset_id","x","y","some","i","lineChartData","findIndex","commit","catch","$router","getDebtData","debtData","debt","refineHistory"],"sources":["C:/Users/crole/Documents/vufi/src/store/store.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport VuexPersistence from 'vuex-persist'\r\nimport axios from 'axios'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n    plugins: [new VuexPersistence({\r\n        storage: window.sessionStorage\r\n    }).plugin],\r\n\r\n    state: {\r\n        isLoggedIn: false,\r\n\r\n        userPrefs: {\r\n            theme: 0,\r\n            currency: 'USD'\r\n        },\r\n\r\n        notification: {\r\n            text: '',\r\n            color: ''\r\n        },\r\n\r\n        assets: {\r\n            totalValue: null,\r\n            tableData: [],\r\n            pieChartValues: [],\r\n            pieChartLabels: [],\r\n            history: [],\r\n        },\r\n\r\n        debts: {\r\n            totalValue: null,\r\n            tableData: [],\r\n            pieChartValues: [],\r\n            pieChartLabels: [],\r\n            history: [],\r\n        },\r\n    },\r\n\r\n    getters: {\r\n\r\n    },\r\n\r\n    mutations: {\r\n        login(state) {\r\n            state.isLoggedIn = true\r\n        },\r\n\r\n        setUserPrefs(state, data) { state.userPrefs = data },\r\n\r\n        logOut(state) {\r\n            state.isLoggedIn = false\r\n\r\n            state.userPrefs = {\r\n                theme: 0,\r\n                currency: 'USD'\r\n            }\r\n\r\n            state.totalAssetValue = null,\r\n            state.totalDebtValue = null\r\n        },\r\n\r\n        setNotification(state, data) { state.notification = data },\r\n\r\n        setAssetData(state, assets) {\r\n            state.assets.totalValue = assets.totalValue\r\n            state.assets.tableData = assets.tableData\r\n            state.assets.pieChartValues = assets.pieChartValues\r\n            state.assets.pieChartLabels = assets.pieChartLabels\r\n            state.assets.history = assets.history\r\n        },\r\n\r\n        setDebtData(state, debts) {\r\n            state.debts.totalValue = debts.totalValue\r\n            state.debts.tableData = debts.tableData\r\n            state.debts.pieChartValues = debts.pieChartValues\r\n            state.debts.pieChartLabels = debts.pieChartLabels\r\n            state.debts.history = debts.history\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async getAssetData() {\r\n            // Set up object we want to return\r\n            let assets = {\r\n                totalValue: 0,\r\n                tableData: [],\r\n                pieChartValues: [],\r\n                pieChartLabels: [],\r\n                history: [],\r\n            }\r\n\r\n            // Get raw asset data\r\n            axios.get(`http://localhost:3000/api/assets`)\r\n            .then(resp => {\r\n                let assetData = resp.data\r\n                \r\n                // Set total value and pie chart data\r\n                if (assetData.length) {\r\n                    for (let asset of assetData) {\r\n                        if (!asset.is_deleted) {\r\n                            assets.pieChartLabels.push(asset.name)\r\n                            assets.pieChartValues.push(parseFloat(asset.value))\r\n                            assets.totalValue += parseFloat(asset.value)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Filter out deleted assets in the table\r\n                assets.tableData = assetData.filter(e => e.is_deleted == 0)\r\n\r\n                // Fill line chart with historic values\r\n                axios.get(`http://localhost:3000/api/assets/history`)\r\n                .then(resp => {\r\n                    let history = resp.data\r\n\r\n                    // Get all individual assets\r\n                    let assets = []\r\n                    for (let asset of assetData) {\r\n                        assets.push({\r\n                            id: asset.id,\r\n                            history: []\r\n                        })\r\n                    }\r\n\r\n                    // Get all dates that there are records for\r\n                    let uniqueDates = []\r\n                    for (let entry of history) {\r\n                        if (!uniqueDates.includes(entry.date)) {\r\n                            uniqueDates.push(entry.date)\r\n                        }\r\n                    }\r\n                    uniqueDates = uniqueDates.sort()\r\n\r\n                    // Go through every asset\r\n                    for (let asset of assets) {\r\n                        for (let date of uniqueDates) {                    \r\n                            // Check if there is any value for that asset on that date, add it if there is.\r\n                            for (let entry of history) {\r\n                                if (entry.date == date && entry.asset_id == asset.id) {\r\n                                    asset.history.push({\r\n                                        x: entry.date,\r\n                                        y: parseFloat(entry.value)\r\n                                    })\r\n                                }\r\n                            }\r\n                            // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                            if (!asset.history.some(e => e.x == date)) {\r\n                                if (asset.history.length) {\r\n                                    asset.history.push({\r\n                                        x: date,\r\n                                        y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Turn the asset data into something the line chart can read\r\n                    for (let asset of assets) {\r\n                        for (let entry of asset.history) {\r\n                            let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                            if (i < 0) {\r\n                                this.lineChartData[0].data.push(entry)\r\n                            }\r\n                            else {\r\n                                this.lineChartData[0].data[i].y += entry.y\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.commit('setAssetData', assets)\r\n                })\r\n            })\r\n            .catch(() => {\r\n                this.$router.push('/404')\r\n            })\r\n        },\r\n\r\n        async getDebtData() {\r\n            // Set up object we want to return\r\n            let debts = {\r\n                totalValue: 0,\r\n                tableData: [],\r\n                pieChartValues: [],\r\n                pieChartLabels: [],\r\n                history: [],\r\n            }\r\n\r\n            // Get raw asset data\r\n            axios.get(`http://localhost:3000/api/debts`)\r\n            .then(resp => {\r\n                let debtData = resp.data\r\n                \r\n                // Set total value and pie chart data\r\n                if (debtData.length) {\r\n                    for (let debt of debtData) {\r\n                        if (!debt.is_deleted) {\r\n                            debts.pieChartLabels.push(debt.name)\r\n                            debts.pieChartValues.push(parseFloat(debt.value))\r\n                            debts.totalValue += parseFloat(debt.value)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Filter out deleted assets in the table\r\n                debts.tableData = debtData.filter(e => e.is_deleted == 0)\r\n\r\n                // Fill line chart with historic values\r\n                axios.get(`http://localhost:3000/api/debts/history`)\r\n                .then(resp => {\r\n                    if (resp != null) {\r\n                        this.commit('setDebtData', debts)\r\n                    }\r\n                    \r\n                    // this.refineAssets(assetData, resp.data)\r\n\r\n                })\r\n            })\r\n            .catch(() => {\r\n                this.$router.push('/404')\r\n            })\r\n        },\r\n\r\n        refineHistory(assetData, history) {\r\n            // Get all individual assets\r\n            let assets = []\r\n            for (let asset of assetData) {\r\n                assets.push({\r\n                    id: asset.id,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assets) {\r\n                for (let date of uniqueDates) {                    \r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            for (let asset of assets) {\r\n                for (let entry of asset.history) {\r\n                    let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                    if (i < 0) {\r\n                        this.lineChartData[0].data.push(entry)\r\n                    }\r\n                    else {\r\n                        this.lineChartData[0].data[i].y += entry.y\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}