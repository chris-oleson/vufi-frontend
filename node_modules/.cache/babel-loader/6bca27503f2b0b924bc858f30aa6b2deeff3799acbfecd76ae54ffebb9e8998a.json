{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'Table',\n  props: ['type', 'url', 'tableData', 'totalValue'],\n  components: {},\n  data: () => ({\n    dialog: false,\n    dialogDelete: false,\n    headers: [{\n      text: 'Name',\n      value: 'name'\n    }, {\n      text: 'Type',\n      value: 'type'\n    }, {\n      text: 'Value',\n      value: 'value',\n      align: 'right'\n    }, {\n      text: 'Actions',\n      value: 'actions',\n      sortable: false,\n      align: 'right'\n    }],\n    editedIndex: -1,\n    editedItem: {\n      name: '',\n      type: '',\n      value: null\n    },\n    defaultItem: {\n      name: '',\n      type: '',\n      value: null\n    }\n  }),\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? 'New ' + this.type : 'Edit ' + this.type;\n    },\n    getColor() {\n      if (this.type == 'Asset') {\n        return 'primary';\n      } else {\n        return 'error';\n      }\n    }\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    }\n  },\n  methods: {\n    editItem(item) {\n      this.editedIndex = this.tableData.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editedIndex = this.tableData.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n    deleteItemConfirm() {\n      this.deleteFromDatabase(this.editedItem);\n      this.closeDelete();\n    },\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n    save() {\n      if (this.editedIndex > -1) {\n        // Editing existing\n        Object.assign(this.tableData[this.editedIndex], this.editedItem);\n        this.replaceInDatabase(this.editedItem);\n      } else {\n        // Adding new item\n        this.addToDatabase(this.editedItem);\n      }\n      this.close();\n    },\n    async addToDatabase(item) {\n      await axios.post(`http://localhost:3000/api/${this.url}`, {\n        name: item.name,\n        type: item.type,\n        value: item.value\n      }).then(() => {\n        this.$store.dispatch('getAllAssetData');\n      });\n    },\n    async replaceInDatabase(item) {\n      await axios.put(`http://localhost:3000/api/${this.url}/${item.id}`, {\n        name: item.name,\n        type: item.type,\n        value: item.value,\n        user_id: this.$store.state.userID\n      }).then(() => {\n        this.$store.dispatch('getAllAssetData');\n      });\n    },\n    async deleteFromDatabase(item) {\n      await axios.delete(`http://localhost:3000/api/${this.url}/${item.id}`).then(() => {\n        this.$store.dispatch('getAllAssetData');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","components","data","dialog","dialogDelete","headers","text","value","align","sortable","editedIndex","editedItem","type","defaultItem","computed","formTitle","getColor","watch","val","close","closeDelete","methods","editItem","item","tableData","indexOf","Object","assign","deleteItem","deleteItemConfirm","deleteFromDatabase","$nextTick","save","replaceInDatabase","addToDatabase","post","url","then","$store","dispatch","put","id","user_id","state","userID","delete"],"sources":["src/components/Table.vue"],"sourcesContent":["<template>\r\n    <v-card class=\"ma-2 pa-2\" elevation=\"4\">\r\n        <v-data-table :headers=\"headers\" :items=\"tableData\" :items-per-page=\"5\">\r\n            <template v-slot:top>\r\n                <v-toolbar flat rounded color=\"transparent\">\r\n\r\n                    <!-- Top bar -->\r\n                    <v-toolbar-title class=\"font-weight-light text-h5\">{{ type }}s</v-toolbar-title>\r\n                    <v-divider v-show=\"tableData.length\" class=\"mx-4\" inset vertical></v-divider>\r\n                    <v-toolbar-title class=\"font-weight-light text-h5\">{{ totalValue | toCurrency }}</v-toolbar-title>\r\n                    <v-spacer></v-spacer>\r\n\r\n                    <v-dialog v-model=\"dialog\" max-width=\"400px\">\r\n                        <template v-slot:activator=\"{ on, attrs }\">\r\n                            <v-btn :color=\"getColor\" fab small outlined v-bind=\"attrs\" v-on=\"on\"><v-icon>mdi-plus</v-icon></v-btn>\r\n                        </template>\r\n\r\n                        <!-- Add or edit asset dialog -->\r\n                        <v-card>\r\n                            <v-card-title>\r\n                                <span class=\"text-h5 font-weight-light\">{{ formTitle }}</span>\r\n                            </v-card-title>\r\n\r\n                            <v-card-text>\r\n                                <v-container>\r\n                                    <v-text-field v-model=\"editedItem.name\" label=\"Name\"></v-text-field>\r\n                                    <v-text-field v-model=\"editedItem.type\" label=\"Type\"></v-text-field>\r\n                                    <v-text-field v-model=\"editedItem.value\" label=\"Value\"></v-text-field>\r\n                                </v-container>\r\n                            </v-card-text>\r\n\r\n                            <v-card-actions>\r\n                                <v-spacer></v-spacer>\r\n                                <v-btn text @click=\"close\">Cancel</v-btn>\r\n                                <v-btn color=\"primary\" text @click=\"save\">Save</v-btn>\r\n                            </v-card-actions>\r\n                        </v-card>\r\n                    </v-dialog>\r\n\r\n                    <!-- Delete asset dialog -->\r\n                    <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\r\n                        <v-card>\r\n                            <v-card-title class=\"text-h5 font-weight-light\">Are you sure you want to delete this {{ type.toLowerCase() }}?</v-card-title>\r\n                            <v-card-actions>\r\n                                <v-spacer></v-spacer>\r\n                                <v-btn text @click=\"closeDelete\">Cancel</v-btn>\r\n                                <v-btn color=\"error\" text @click=\"deleteItemConfirm\">OK</v-btn>\r\n                                <v-spacer></v-spacer>\r\n                            </v-card-actions>\r\n                        </v-card>\r\n                    </v-dialog>\r\n                </v-toolbar>\r\n            </template>\r\n\r\n            <!-- Format cost to currency -->\r\n            <template v-slot:[`item.cost`]=\"{ item }\">\r\n                <span>{{ item.cost | toCurrency }}</span>\r\n            </template>\r\n\r\n            <!-- Format value to currency -->\r\n            <template v-slot:[`item.value`]=\"{ item }\">\r\n                <span v-if=\"item.value\">{{ parseFloat(item.value) | toCurrency }}</span>\r\n            </template>\r\n\r\n            <!-- Action buttons -->\r\n            <template v-slot:[`item.actions`]=\"{ item }\">\r\n                <v-icon small class=\"mr-2\" @click=\"editItem(item)\">mdi-pencil</v-icon>\r\n                <v-icon small @click=\"deleteItem(item)\">mdi-delete</v-icon>\r\n            </template>\r\n\r\n            <!-- No data display -->\r\n            <template v-slot:no-data>\r\n                <p class=\"my-4\">No {{ type.toLowerCase() }}s have been added</p>\r\n            </template>\r\n        </v-data-table>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'Table',\r\n    props: ['type', 'url', 'tableData', 'totalValue'],\r\n    components: {\r\n        \r\n    },\r\n\r\n    data: () => ({\r\n        dialog: false,\r\n        dialogDelete: false,\r\n        headers: [\r\n            { text: 'Name', value: 'name' },\r\n            { text: 'Type', value: 'type' },\r\n            { text: 'Value', value: 'value', align: 'right' },\r\n            { text: 'Actions', value: 'actions', sortable: false, align: 'right' },\r\n        ],\r\n        editedIndex: -1,\r\n        editedItem: {\r\n            name: '',\r\n            type: '',\r\n            value: null,\r\n        },\r\n        defaultItem: {\r\n            name: '',\r\n            type: '',\r\n            value: null,\r\n        },\r\n    }),\r\n\r\n    computed: {\r\n        formTitle () {\r\n            return this.editedIndex === -1 ? 'New ' + this.type : 'Edit ' + this.type\r\n        },\r\n\r\n        getColor() {\r\n            if (this.type == 'Asset') {\r\n                return 'primary'\r\n            }\r\n            else {\r\n                return 'error'\r\n            }\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        dialog (val) {\r\n            val || this.close()\r\n        },\r\n        dialogDelete (val) {\r\n            val || this.closeDelete()\r\n        },\r\n    },\r\n\r\n    methods: {\r\n        editItem (item) {\r\n            this.editedIndex = this.tableData.indexOf(item)\r\n            this.editedItem = Object.assign({}, item)\r\n            this.dialog = true\r\n        },\r\n\r\n        deleteItem (item) {\r\n            this.editedIndex = this.tableData.indexOf(item)\r\n            this.editedItem = Object.assign({}, item)\r\n            this.dialogDelete = true\r\n        },\r\n\r\n        deleteItemConfirm () {\r\n            this.deleteFromDatabase(this.editedItem)\r\n            this.closeDelete()\r\n        },\r\n\r\n        close () {\r\n            this.dialog = false\r\n            this.$nextTick(() => {\r\n                this.editedItem = Object.assign({}, this.defaultItem)\r\n                this.editedIndex = -1\r\n            })\r\n        },\r\n\r\n        closeDelete () {\r\n            this.dialogDelete = false\r\n            this.$nextTick(() => {\r\n                this.editedItem = Object.assign({}, this.defaultItem)\r\n                this.editedIndex = -1\r\n            })\r\n        },\r\n\r\n        save () {\r\n            if (this.editedIndex > -1) {\r\n                // Editing existing\r\n                Object.assign(this.tableData[this.editedIndex], this.editedItem)\r\n                this.replaceInDatabase(this.editedItem)\r\n            } else {\r\n                // Adding new item\r\n                this.addToDatabase(this.editedItem)\r\n            }\r\n            this.close()\r\n        },\r\n\r\n        async addToDatabase(item) {\r\n            await axios.post(`http://localhost:3000/api/${this.url}`, {\r\n                name: item.name,\r\n                type: item.type,\r\n                value: item.value,\r\n            })\r\n            .then(() => {\r\n                this.$store.dispatch('getAllAssetData')\r\n            })\r\n        },\r\n        \r\n        async replaceInDatabase(item) {\r\n            await axios.put(`http://localhost:3000/api/${this.url}/${item.id}`, {\r\n                name: item.name,\r\n                type: item.type,\r\n                value: item.value,\r\n                user_id: this.$store.state.userID,\r\n            })\r\n            .then(() => {\r\n                this.$store.dispatch('getAllAssetData')\r\n            })\r\n        },\r\n\r\n        async deleteFromDatabase(item) {\r\n            await axios.delete(`http://localhost:3000/api/${this.url}/${item.id}`)\r\n            .then(() => {\r\n                this.$store.dispatch('getAllAssetData')\r\n            })\r\n        }\r\n    },\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}