{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport LineChart from '/src/components/LineChart.vue';\nimport TreeMapChart from '/src/components/TreeMapChart.vue';\nimport axios from 'axios';\nexport default {\n  name: 'NetWorth',\n  components: {\n    LineChart,\n    TreeMapChart\n  },\n  data() {\n    return {\n      assets: [],\n      debts: [],\n      lineChartData: [{\n        name: 'Net Worth',\n        data: []\n      }]\n    };\n  },\n  mounted() {\n    for (let asset of this.$store.state.allAssets) {\n      if (asset.is_debt && !asset.is_deleted) {\n        this.treeChartData[1].data.push({\n          x: asset.name,\n          y: parseFloat(asset.value)\n        });\n      } else if (!asset.is_deleted) {\n        this.treeChartData[0].data.push({\n          x: asset.name,\n          y: parseFloat(asset.value)\n        });\n      }\n    }\n  },\n  computed: {\n    treeChartData() {\n      return [{\n        name: 'Assets',\n        data: assets\n      }, {\n        name: 'Debts',\n        data: debts\n      }];\n    }\n  },\n  methods: {\n    refineAssets(assetData, history) {\n      // Get all individual assets\n      let assets = [];\n      for (let asset of assetData) {\n        assets.push({\n          id: asset.id,\n          is_debt: asset.is_debt,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assets) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      for (let asset of assets) {\n        for (let entry of asset.history) {\n          let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n          if (asset.is_debt) {\n            if (i < 0) {\n              entry.y = 0 - entry.y;\n              this.lineChartData[0].data.push(entry);\n            } else {\n              this.lineChartData[0].data[i].y -= entry.y;\n            }\n          } else {\n            if (i < 0) {\n              this.lineChartData[0].data.push(entry);\n            } else {\n              this.lineChartData[0].data[i].y += entry.y;\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["LineChart","TreeMapChart","axios","name","components","data","assets","debts","lineChartData","mounted","asset","$store","state","allAssets","is_debt","is_deleted","treeChartData","push","x","y","parseFloat","value","computed","methods","refineAssets","assetData","history","id","uniqueDates","entry","includes","date","sort","asset_id","some","e","length","i","findIndex"],"sources":["src/components/NetWorth.vue"],"sourcesContent":["<template>\r\n    <v-row class=\"ma-2\">\r\n        <v-flex xs12>\r\n            <LineChart :theme=\"$vuetify.theme.themes.light.primary\" :series=\"lineChartData\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <TreeMapChart :series=\"treeChartData\"/>\r\n        </v-flex>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport LineChart from '/src/components/LineChart.vue'\r\nimport TreeMapChart from '/src/components/TreeMapChart.vue'\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n    name: 'NetWorth',\r\n    components: {\r\n        LineChart,\r\n        TreeMapChart,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            assets: [],\r\n            debts: [],\r\n\r\n            lineChartData: [{\r\n                name: 'Net Worth',\r\n                data: []\r\n            }],\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        for (let asset of this.$store.state.allAssets) {\r\n            if (asset.is_debt && !asset.is_deleted) {\r\n                this.treeChartData[1].data.push({\r\n                    x: asset.name,\r\n                    y: parseFloat(asset.value)\r\n                })\r\n            }\r\n            else if (!asset.is_deleted) {\r\n                this.treeChartData[0].data.push({\r\n                    x: asset.name,\r\n                    y: parseFloat(asset.value)\r\n                })\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        treeChartData() {\r\n            return [\r\n                {\r\n                    name: 'Assets',\r\n                    data: assets\r\n                },\r\n                {\r\n                    name: 'Debts',\r\n                    data: debts\r\n                }\r\n            ]\r\n        },\r\n    },\r\n\r\n    methods: {\r\n\r\n        refineAssets(assetData, history) {\r\n            // Get all individual assets\r\n            let assets = []\r\n            for (let asset of assetData) {\r\n                assets.push({\r\n                    id: asset.id,\r\n                    is_debt: asset.is_debt,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assets) {\r\n                for (let date of uniqueDates) {                    \r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            for (let asset of assets) {\r\n                for (let entry of asset.history) {\r\n                    let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                    if (asset.is_debt) {\r\n                        if (i < 0) {\r\n                            entry.y = 0 - entry.y\r\n                            this.lineChartData[0].data.push(entry)\r\n                        }\r\n                        else {\r\n                            this.lineChartData[0].data[i].y -= entry.y\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (i < 0) {\r\n                            this.lineChartData[0].data.push(entry)\r\n                        }\r\n                        else {\r\n                            this.lineChartData[0].data[i].y += entry.y\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}