{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Table from '/src/components/Table.vue';\nimport PieChart from '/src/components/PieChart.vue';\nimport LineChart from '/src/components/LineChart.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Assets',\n  components: {\n    Table,\n    PieChart,\n    LineChart\n  },\n  data() {\n    return {\n      tableData: [],\n      totalValue: null,\n      pieChartValues: [],\n      pieChartLabels: [],\n      lineChartData: [{\n        name: 'Total Assets',\n        data: this.$store.getters.getAssetHistory\n      }]\n    };\n  },\n  mounted() {\n    this.loadData();\n  },\n  methods: {\n    async loadData() {\n      this.totalValue = null;\n      this.lineChartData[0].data = [];\n      this.pieChartValues = [];\n      this.pieChartLabels = [];\n      axios.get(`http://localhost:3000/api/assets`, {\n        withCrendentials: true\n      }).then(resp => {\n        let assetData = resp.data;\n        this.tableData = assetData.filter(e => e.is_deleted == 0);\n        if (assetData.length) {\n          this.totalValue = 0;\n          for (let asset of assetData) {\n            if (!asset.is_deleted) {\n              this.pieChartLabels.push(asset.name);\n              this.pieChartValues.push(parseFloat(asset.value));\n              this.totalValue += parseFloat(asset.value);\n            }\n          }\n        }\n        this.$store.commit('setTotalAssetValue', this.totalValue);\n        axios.get(`http://localhost:3000/api/assets/history`).then(resp => {\n          this.refineAssets(assetData, resp.data);\n        });\n      }).catch(() => {\n        this.$router.push('/404');\n      });\n    },\n    refineAssets(assetData, history) {\n      // Get all individual assets\n      let assets = [];\n      for (let asset of assetData) {\n        assets.push({\n          id: asset.id,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assets) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      for (let asset of assets) {\n        for (let entry of asset.history) {\n          let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n          if (i < 0) {\n            this.lineChartData[0].data.push(entry);\n          } else {\n            this.lineChartData[0].data[i].y += entry.y;\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAiBA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EAEAC;IACA;MACAC;MAEAC;MAEAC;MACAC;MAEAC;QACAV;QACAK;MACA;IACA;EACA;EAEAM;IACA;EACA;EAEAC;IACA;MACA;MACA;MACA;MACA;MAEAC;QAAAC;MAAA,GACAC;QACA;QACA;QAEA;UACA;UACA;YACA;cACA;cACA;cACA;YACA;UACA;QACA;QAEA;QAEAF,sDACAE;UACA;QACA;MACA,GACAC;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;QACAC;UACAC;UACAC;QACA;MACA;;MAEA;MACA;MACA;QACA;UACAC;QACA;MACA;MACAA;;MAEA;MACA;QACA;UACA;UACA;YACA;cACAC;gBACAC;gBACAC;cACA;YACA;UACA;UACA;UACA;YACA;cACAF;gBACAC;gBACAC;cACA;YACA;UACA;QACA;MACA;;MAEA;MACA;QACA;UACA;UACA;YACA;UACA,OACA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","components","Table","PieChart","LineChart","data","tableData","totalValue","pieChartValues","pieChartLabels","lineChartData","mounted","methods","axios","withCrendentials","then","catch","refineAssets","assets","id","history","uniqueDates","asset","x","y"],"sourceRoot":"src/components","sources":["Assets.vue"],"sourcesContent":["<template>\r\n    <v-row class=\"ma-2\">\r\n        <v-flex xs12>\r\n            <LineChart :theme=\"$vuetify.theme.themes.light.primary\" :series=\"lineChartData\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <Table type=\"Asset\" url=\"assets\" :tableData=\"tableData\" :totalValue=\"totalValue\"/>\r\n        </v-flex>\r\n\r\n        <v-flex xs12 md6>\r\n            <PieChart type=\"Asset\" :series=\"pieChartValues\" :labels=\"pieChartLabels\"/>\r\n        </v-flex>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport Table from '/src/components/Table.vue'\r\nimport PieChart from '/src/components/PieChart.vue'\r\nimport LineChart from '/src/components/LineChart.vue'\r\nimport axios from 'axios'\r\n\r\nexport default ({\r\n    name: 'Assets',\r\n    components: {\r\n        Table,\r\n        PieChart,\r\n        LineChart,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            tableData: [],\r\n\r\n            totalValue: null,\r\n\r\n            pieChartValues: [],\r\n            pieChartLabels: [],\r\n\r\n            lineChartData: [{\r\n                name: 'Total Assets',\r\n                data: this.$store.getters.getAssetHistory\r\n            }],\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.loadData()\r\n    },\r\n\r\n    methods: {\r\n        async loadData() {\r\n            this.totalValue = null\r\n            this.lineChartData[0].data = []\r\n            this.pieChartValues = []\r\n            this.pieChartLabels = []\r\n\r\n            axios.get(`http://localhost:3000/api/assets`, { withCrendentials: true })\r\n            .then(resp => {\r\n                let assetData = resp.data\r\n                this.tableData = assetData.filter(e => e.is_deleted == 0)\r\n\r\n                if (assetData.length) {\r\n                    this.totalValue = 0\r\n                    for (let asset of assetData) {\r\n                        if (!asset.is_deleted) {\r\n                            this.pieChartLabels.push(asset.name)\r\n                            this.pieChartValues.push(parseFloat(asset.value))\r\n                            this.totalValue += parseFloat(asset.value)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.$store.commit('setTotalAssetValue', this.totalValue)\r\n\r\n                axios.get(`http://localhost:3000/api/assets/history`)\r\n                .then(resp => {\r\n                    this.refineAssets(assetData, resp.data)\r\n                })\r\n            })\r\n            .catch(() => {\r\n                this.$router.push('/404')\r\n            })\r\n        },\r\n\r\n        refineAssets(assetData, history) {\r\n            // Get all individual assets\r\n            let assets = []\r\n            for (let asset of assetData) {\r\n                assets.push({\r\n                    id: asset.id,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assets) {\r\n                for (let date of uniqueDates) {                    \r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            for (let asset of assets) {\r\n                for (let entry of asset.history) {\r\n                    let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                    if (i < 0) {\r\n                        this.lineChartData[0].data.push(entry)\r\n                    }\r\n                    else {\r\n                        this.lineChartData[0].data[i].y += entry.y\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>"]},"metadata":{},"sourceType":"module"}