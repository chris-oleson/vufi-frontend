{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport VuexPersistence from 'vuex-persist';\nimport axios from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  plugins: [new VuexPersistence({\n    storage: window.sessionStorage\n  }).plugin],\n  state: {\n    isLoggedIn: false,\n    userPrefs: {\n      theme: 0,\n      currency: 'USD'\n    },\n    notification: {\n      text: '',\n      color: ''\n    },\n    assets: {\n      totalValue: null,\n      tableData: [],\n      pieChartValues: [],\n      pieChartLabels: [],\n      history: []\n    },\n    debts: {\n      totalValue: null,\n      tableData: [],\n      pieChartValues: [],\n      pieChartLabels: [],\n      history: []\n    }\n  },\n  getters: {},\n  mutations: {\n    login(state) {\n      state.isLoggedIn = true;\n    },\n    setUserPrefs(state, data) {\n      state.userPrefs = data;\n    },\n    logOut(state) {\n      state.isLoggedIn = false;\n      state.userPrefs = {\n        theme: 0,\n        currency: 'USD'\n      };\n      state.totalAssetValue = null, state.totalDebtValue = null;\n    },\n    setNotification(state, data) {\n      state.notification = data;\n    },\n    setAssetData(state, assets) {\n      state.assets.totalValue = assets.totalValue;\n      state.assets.tableData = assets.tableData;\n      state.assets.pieChartValues = assets.pieChartValues;\n      state.assets.pieChartLabels = assets.pieChartLabels;\n      state.assets.history = assets.pieChartLabels;\n    }\n  },\n  actions: {\n    async getAssetData(state) {\n      let assets = {\n        totalValue,\n        tableData,\n        pieChartValues,\n        pieChartLabels,\n        history\n      };\n\n      // Get raw asset data\n      axios.get(`http://localhost:3000/api/assets`).then(resp => {\n        let assets = resp.data;\n\n        // Filter out deleted assets in the table\n        state.tableData = assets.filter(e => e.is_deleted == 0);\n        if (assets.length) {\n          this.totalValue = 0;\n          for (let asset of assets) {\n            if (!asset.is_deleted) {\n              this.pieChartLabels.push(asset.name);\n              this.pieChartValues.push(parseFloat(asset.value));\n              this.totalValue += parseFloat(asset.value);\n            }\n          }\n        }\n        this.$store.commit('setTotalAssetValue', this.totalValue);\n        axios.get(`http://localhost:3000/api/assets/history`).then(resp => {\n          this.refineAssets(assets, resp.data);\n        });\n      }).catch(() => {\n        this.$router.push('/404');\n      });\n    },\n    refineAssets(assetData, history) {\n      // Get all individual assets\n      let assets = [];\n      for (let asset of assetData) {\n        assets.push({\n          id: asset.id,\n          history: []\n        });\n      }\n\n      // Get all dates that there are records for\n      let uniqueDates = [];\n      for (let entry of history) {\n        if (!uniqueDates.includes(entry.date)) {\n          uniqueDates.push(entry.date);\n        }\n      }\n      uniqueDates = uniqueDates.sort();\n\n      // Go through every asset\n      for (let asset of assets) {\n        for (let date of uniqueDates) {\n          // Check if there is any value for that asset on that date, add it if there is.\n          for (let entry of history) {\n            if (entry.date == date && entry.asset_id == asset.id) {\n              asset.history.push({\n                x: entry.date,\n                y: parseFloat(entry.value)\n              });\n            }\n          }\n          // If the asset doesn't have an entry for a date with data, add one with the previous value.\n          if (!asset.history.some(e => e.x == date)) {\n            if (asset.history.length) {\n              asset.history.push({\n                x: date,\n                y: parseFloat(asset.history[asset.history.length - 1].y)\n              });\n            }\n          }\n        }\n      }\n\n      // Turn the asset data into something the line chart can read\n      for (let asset of assets) {\n        for (let entry of asset.history) {\n          let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x);\n          if (i < 0) {\n            this.lineChartData[0].data.push(entry);\n          } else {\n            this.lineChartData[0].data[i].y += entry.y;\n          }\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","VuexPersistence","axios","use","Store","plugins","storage","window","sessionStorage","plugin","state","isLoggedIn","userPrefs","theme","currency","notification","text","color","assets","totalValue","tableData","pieChartValues","pieChartLabels","history","debts","getters","mutations","login","setUserPrefs","data","logOut","totalAssetValue","totalDebtValue","setNotification","setAssetData","actions","getAssetData","get","then","resp","filter","e","is_deleted","length","asset","push","name","parseFloat","value","$store","commit","refineAssets","catch","$router","assetData","id","uniqueDates","entry","includes","date","sort","asset_id","x","y","some","i","lineChartData","findIndex"],"sources":["C:/Users/crole/Documents/vufi/src/store/store.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport VuexPersistence from 'vuex-persist'\r\nimport axios from 'axios'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n    plugins: [new VuexPersistence({\r\n        storage: window.sessionStorage\r\n    }).plugin],\r\n\r\n    state: {\r\n        isLoggedIn: false,\r\n\r\n        userPrefs: {\r\n            theme: 0,\r\n            currency: 'USD'\r\n        },\r\n\r\n        notification: {\r\n            text: '',\r\n            color: ''\r\n        },\r\n\r\n        assets: {\r\n            totalValue: null,\r\n            tableData: [],\r\n            pieChartValues: [],\r\n            pieChartLabels: [],\r\n            history: [],\r\n        },\r\n\r\n        debts: {\r\n            totalValue: null,\r\n            tableData: [],\r\n            pieChartValues: [],\r\n            pieChartLabels: [],\r\n            history: [],\r\n        },\r\n    },\r\n\r\n    getters: {\r\n\r\n    },\r\n\r\n    mutations: {\r\n        login(state) {\r\n            state.isLoggedIn = true\r\n        },\r\n\r\n        setUserPrefs(state, data) { state.userPrefs = data },\r\n\r\n        logOut(state) {\r\n            state.isLoggedIn = false\r\n\r\n            state.userPrefs = {\r\n                theme: 0,\r\n                currency: 'USD'\r\n            }\r\n\r\n            state.totalAssetValue = null,\r\n            state.totalDebtValue = null\r\n        },\r\n\r\n        setNotification(state, data) { state.notification = data },\r\n\r\n        setAssetData(state, assets) {\r\n            state.assets.totalValue = assets.totalValue\r\n            state.assets.tableData = assets.tableData\r\n            state.assets.pieChartValues = assets.pieChartValues\r\n            state.assets.pieChartLabels = assets.pieChartLabels\r\n            state.assets.history = assets.pieChartLabels\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async getAssetData(state) {\r\n\r\n            let assets = {\r\n                totalValue,\r\n                tableData,\r\n                pieChartValues,\r\n                pieChartLabels,\r\n                history,\r\n            }\r\n\r\n            // Get raw asset data\r\n            axios.get(`http://localhost:3000/api/assets`)\r\n            .then(resp => {\r\n                let assets = resp.data\r\n\r\n                // Filter out deleted assets in the table\r\n                state.tableData = assets.filter(e => e.is_deleted == 0)\r\n\r\n                if (assets.length) {\r\n                    this.totalValue = 0\r\n                    for (let asset of assets) {\r\n                        if (!asset.is_deleted) {\r\n                            this.pieChartLabels.push(asset.name)\r\n                            this.pieChartValues.push(parseFloat(asset.value))\r\n                            this.totalValue += parseFloat(asset.value)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.$store.commit('setTotalAssetValue', this.totalValue)\r\n\r\n                axios.get(`http://localhost:3000/api/assets/history`)\r\n                .then(resp => {\r\n                    this.refineAssets(assets, resp.data)\r\n                })\r\n            })\r\n            .catch(() => {\r\n                this.$router.push('/404')\r\n            })\r\n        },\r\n\r\n        refineAssets(assetData, history) {\r\n            // Get all individual assets\r\n            let assets = []\r\n            for (let asset of assetData) {\r\n                assets.push({\r\n                    id: asset.id,\r\n                    history: []\r\n                })\r\n            }\r\n\r\n            // Get all dates that there are records for\r\n            let uniqueDates = []\r\n            for (let entry of history) {\r\n                if (!uniqueDates.includes(entry.date)) {\r\n                    uniqueDates.push(entry.date)\r\n                }\r\n            }\r\n            uniqueDates = uniqueDates.sort()\r\n\r\n            // Go through every asset\r\n            for (let asset of assets) {\r\n                for (let date of uniqueDates) {                    \r\n                    // Check if there is any value for that asset on that date, add it if there is.\r\n                    for (let entry of history) {\r\n                        if (entry.date == date && entry.asset_id == asset.id) {\r\n                            asset.history.push({\r\n                                x: entry.date,\r\n                                y: parseFloat(entry.value)\r\n                            })\r\n                        }\r\n                    }\r\n                    // If the asset doesn't have an entry for a date with data, add one with the previous value.\r\n                    if (!asset.history.some(e => e.x == date)) {\r\n                        if (asset.history.length) {\r\n                            asset.history.push({\r\n                                x: date,\r\n                                y: parseFloat(asset.history[asset.history.length - 1].y)\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Turn the asset data into something the line chart can read\r\n            for (let asset of assets) {\r\n                for (let entry of asset.history) {\r\n                    let i = this.lineChartData[0].data.findIndex(e => e.x == entry.x)\r\n                    if (i < 0) {\r\n                        this.lineChartData[0].data.push(entry)\r\n                    }\r\n                    else {\r\n                        this.lineChartData[0].data[i].y += entry.y\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    }\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}